% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/xgb.plot.tree.R
\name{xgb.plot.tree}
\alias{xgb.plot.tree}
\title{Plot boosted trees}
\usage{
xgb.plot.tree(
  model,
  tree_idx = 1,
  plot_width = NULL,
  plot_height = NULL,
  with_stats = FALSE,
  ...
)
}
\arguments{
\item{model}{Object of class \code{xgb.Booster}. If it contains feature names
(they can be set through \code{\link[=setinfo]{setinfo()}}, they will be used in the
output from this function.}

\item{tree_idx}{An integer of the tree index that should be used. This
is an 1-based index.}

\item{plot_width, plot_height}{Width and height of the graph in pixels.
The values are passed to \code{DiagrammeR::render_graph()}.}

\item{with_stats}{Whether to dump some additional statistics about the
splits.  When this option is on, the model dump contains two additional
values: gain is the approximate loss function gain we get in each split;
cover is the sum of second order gradient in each node.}

\item{...}{Currently not used.}
}
\value{
Rendered graph object which is an htmlwidget of ' class \code{grViz}. Similar to
"ggplot" objects, it needs to be printed when not running from the command
line.
}
\description{
Read a tree model text dump and plot the model.
}
\details{
The content of each node is visualized as follows:
\itemize{
\item For non-terminal nodes, it will display the split condition (number or name
if available, and the condition that would decide to which node to go
next).
\item Those nodes will be connected to their children by arrows that indicate
whether the branch corresponds to the condition being met or not being met.
\item Terminal (leaf) nodes contain the margin to add when ending there.
}

The "Yes" branches are marked by the "< split_value" label.
The branches also used for missing values are marked as bold
(as in "carrying extra capacity").

This function uses \href{https://www.graphviz.org/}{GraphViz} as DiagrammeR
backend.
}
\examples{
data(agaricus.train, package = "xgboost")

bst <- xgb.train(
  data = xgb.DMatrix(agaricus.train$data, agaricus.train$label),
  max_depth = 3,
  eta = 1,
  nthread = 2,
  nrounds = 2,
  objective = "binary:logistic"
)

# plot the first tree
xgb.plot.tree(model = bst, tree_idx = 1)


\dontrun{
# Below is an example of how to save this plot to a file.

library(DiagrammeR)

gr <- xgb.plot.tree(model = bst, tree_idx = 1)
htmlwidgets::saveWidget(gr, 'plot.html')
}

}
