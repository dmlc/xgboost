name: Nextgen XGBoost CI

on: [push, pull_request]

permissions:
  contents: read  # to fetch code (actions/checkout)

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  BRANCH_NAME: >-
    ${{ github.event.pull_request.number && 'PR-' }}${{ github.event.pull_request.number || github.ref_name }}
  USE_DOCKER_CACHE: 1

jobs:
  build-containers:
    name: Build CI containers
    runs-on:
      - runs-on=${{ github.run_id }}
      - runner=${{ matrix.runner }}
      - spot=false
    strategy:
      matrix:
        container_id:
          - xgb-ci.gpu_build_rockylinux8
          - xgb-ci.gpu
          - xgb-ci.gpu_dev_ver
          - xgb-ci.cpu
          - xgb-ci.clang_tidy
          - xgb-ci.manylinux_2_28_x86_64
          - xgb-ci.manylinux2014_x86_64
        runner: [linux-amd64-cpu]
        include:
          - container_id: xgb-ci.manylinux2014_aarch64
            runner: linux-arm64-cpu
          - container_id: xgb-ci.aarch64
            runner: linux-arm64-cpu
    steps:
      # Restart Docker daemon so that it recognized the ephemeral disks
      - run: sudo systemctl restart docker
      - uses: actions/checkout@v4
        with:
          submodules: "true"
      - name: Build ${{ matrix.container_id }}
        run: bash ops/docker_build.sh
        env:
          CONTAINER_ID: ${{ matrix.container_id }}

  clang-tidy:
    name: Run clang-tidy
    needs: build-containers
    runs-on:
      - runs-on=${{ github.run_id }}
      - runner=linux-amd64-cpu
    steps:
      # Restart Docker daemon so that it recognizes the ephemeral disks
      - run: sudo systemctl restart docker
      - uses: actions/checkout@v4
        with:
          submodules: "true"
      - name: Fetch container from cache
        run: bash ops/docker_build.sh
        env:
          CONTAINER_ID: xgb-ci.clang_tidy
      - run: bash ops/pipeline/run-clang-tidy.sh

  build-cpu:
    name: Build CPU
    needs: build-containers
    runs-on:
      - runs-on=${{ github.run_id }}
      - runner=linux-amd64-cpu
    steps:
      # Restart Docker daemon so that it recognizes the ephemeral disks
      - run: sudo systemctl restart docker
      - uses: actions/checkout@v4
        with:
          submodules: "true"
      - name: Fetch container from cache
        run: bash ops/docker_build.sh
        env:
          CONTAINER_ID: xgb-ci.cpu
      - run: bash ops/pipeline/build-cpu.sh
      - name: Stash CLI executable
        run: bash ops/stash_artifacts.sh ./xgboost
        env:
          COMMAND: upload
          KEY: build-cpu

  build-cpu-arm64:
    name: Build CPU ARM64 + manylinux_2_28_aarch64 wheel
    needs: build-containers
    runs-on:
      - runs-on=${{ github.run_id }}
      - runner=linux-arm64-cpu
    steps:
      # Restart Docker daemon so that it recognizes the ephemeral disks
      - run: sudo systemctl restart docker
      - uses: actions/checkout@v4
        with:
          submodules: "true"
      - name: Fetch container from cache
        run: bash ops/docker_build.sh
        env:
          CONTAINER_ID: xgb-ci.aarch64
      - run: bash ops/pipeline/build-cpu-arm64.sh
      - name: Stash files
        run: bash ops/stash_artifacts.sh ./xgboost python-package/dist/*.whl
        env:
          COMMAND: upload
          KEY: build-cpu-arm64

  build-cuda:
    name: Build CUDA + manylinux_2_28_x86_64 wheel
    needs: build-containers
    runs-on:
      - runs-on=${{ github.run_id }}
      - runner=linux-amd64-cpu
      - spot=false
    steps:
      # Restart Docker daemon so that it recognizes the ephemeral disks
      - run: sudo systemctl restart docker
      - uses: actions/checkout@v4
        with:
          submodules: "true"
      - name: Fetch container from cache
        run: bash ops/docker_build.sh
        env:
          CONTAINER_ID: xgb-ci.gpu_build_rockylinux8
      - name: Fetch container from cache
        run: bash ops/docker_build.sh
        env:
          CONTAINER_ID: xgb-ci.manylinux_2_28_x86_64
      - run: bash ops/pipeline/build-cuda.sh
      - name: Stash files
        run: |
          bash ops/stash_artifacts.sh \
            build/testxgboost ./xgboost python-package/dist/*.whl
        env:
          COMMAND: upload
          KEY: build-cuda

  build-cuda-with-rmm:
    name: Build CUDA with RMM
    needs: build-containers
    runs-on:
      - runs-on=${{ github.run_id }}
      - runner=linux-amd64-cpu
    steps:
      # Restart Docker daemon so that it recognizes the ephemeral disks
      - run: sudo systemctl restart docker
      - uses: actions/checkout@v4
        with:
          submodules: "true"
      - name: Fetch container from cache
        run: bash ops/docker_build.sh
        env:
          CONTAINER_ID: xgb-ci.gpu_build_rockylinux8
      - name: Fetch container from cache
        run: bash ops/docker_build.sh
        env:
          CONTAINER_ID: xgb-ci.manylinux_2_28_x86_64
      - run: bash ops/pipeline/build-cuda-with-rmm.sh
      - name: Stash files
        run: bash ops/stash_artifacts.sh build/testxgboost
        env:
          COMMAND: upload
          KEY: build-cuda-with-rmm

  build-jvm-manylinux2014:
    name: Build libxgboost4j.so targeting gblic 2.17
    needs: build-containers
    runs-on:
      - runs-on=${{ github.run_id }}
      - runner=${{ matrix.runner }}
    strategy:
      matrix:
        include:
        - arch: aarch64
          runner: linux-arm64-cpu
        - arch: x86_64
          runner: linux-amd64-cpu

    steps:
      # Restart Docker daemon so that it recognizes the ephemeral disks
      - run: sudo systemctl restart docker
      - uses: actions/checkout@v4
        with:
          submodules: "true"
      - name: Fetch container from cache
        run: bash ops/docker_build.sh
        env:
          CONTAINER_ID: xgb-ci.manylinux2014_${{ matrix.arch }}
      - run: bash ops/pipeline/build-jvm-manylinux2014.sh ${{ matrix.arch }}

  build-manylinux2014:
    name: Build manylinux2024_${{ matrix.arch }} wheel
    needs: build-containers
    runs-on:
      - runs-on=${{ github.run_id }}
      - runner=${{ matrix.runner }}
    strategy:
      matrix:
        include:
        - arch: aarch64
          runner: linux-arm64-cpu
        - arch: x86_64
          runner: linux-amd64-cpu
    steps:
      # Restart Docker daemon so that it recognizes the ephemeral disks
      - run: sudo systemctl restart docker
      - uses: actions/checkout@v4
        with:
          submodules: "true"
      - name: Fetch container from cache
        run: bash ops/docker_build.sh
        env:
          CONTAINER_ID: xgb-ci.manylinux2014_${{ matrix.arch }}
      - run: bash ops/pipeline/build-manylinux2014.sh ${{ matrix.arch }}

  test-cpp-gpu:
    name: Run Google Tests with GPU(s)
    needs: [build-cuda, build-cuda-with-rmm]
    runs-on:
      - runs-on=${{ github.run_id }}
      - runner=${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - suite: gpu
            runner: linux-amd64-gpu
            artifact_from: build-cuda
          - suite: gpu-rmm
            runner: linux-amd64-gpu
            artifact_from: build-cuda-with-rmm
          - suite: mgpu
            runner: linux-amd64-mgpu
            artifact_from: build-cuda
    steps:
      # Restart Docker daemon so that it recognized the ephemeral disks
      - run: sudo systemctl restart docker
      - uses: actions/checkout@v4
        with:
          submodules: "true"
      - name: Fetch container from cache
        run: bash ops/docker_build.sh
        env:
          CONTAINER_ID: xgb-ci.gpu
      - name: Unstash gtest
        run: |
          bash ops/stash_artifacts.sh build/testxgboost
          chmod +x build/testxgboost
        env:
          COMMAND: download
          KEY: ${{ matrix.artifact_from }}
      - run: bash ops/pipeline/test-cpp-gpu.sh ${{ matrix.suite }}

  test-python:
    name: Run Python tests
    needs: [build-cuda]
    runs-on:
      - runs-on=${{ github.run_id }}
      - runner=${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - description: "single GPU"
            container: xgb-ci.gpu
            suite: gpu
            runner: linux-amd64-gpu
            artifact_from: build-cuda
          - description: "single GPU, nightly deps"
            container: xgb-ci.gpu_dev_ver
            suite: gpu
            runner: linux-amd64-gpu
            artifact_from: build-cuda
          - description: "multiple GPUs"
            container: xgb-ci.gpu
            suite: mgpu
            runner: linux-amd64-mgpu
            artifact_from: build-cuda
          - description: "multiple GPUs, nightly deps"
            container: xgb-ci.gpu_dev_ver
            suite: mgpu
            runner: linux-amd64-mgpu
            artifact_from: build-cuda
          - description: "CPU"
            container: xgb-ci.cpu
            suite: cpu
            runner: linux-amd64-cpu
            artifact_from: build-cuda
          - description: "CPU ARM64"
            container: xgb-ci.aarch64
            suite: cpu-arm64
            runner: linux-arm64-cpu
            artifact_from: build-cpu-arm64
    steps:
      # Restart Docker daemon so that it recognized the ephemeral disks
      - run: sudo systemctl restart docker
      - uses: actions/checkout@v4
        with:
          submodules: "true"
      - name: Fetch container from cache
        run: bash ops/docker_build.sh
        env:
          CONTAINER_ID: ${{ matrix.container }}
      - name: Unstash Python wheel
        run: |
          bash ops/stash_artifacts.sh python-package/dist/*.whl ./xgboost
          chmod +x ./xgboost
        env:
          COMMAND: download
          KEY: ${{ matrix.artifact_from }}
      - name: Run Python tests, ${{ matrix.description }}
        run: bash ops/pipeline/test-python.sh ${{ matrix.suite }} ${{ matrix.container }}
