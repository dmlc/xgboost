# This is a basic workflow to help you get started with Actions

name: XGBoost-CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on: [push, pull_request]

permissions:
  contents: read # to fetch code (actions/checkout)

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  gtest-cpu:
    name: Test Google C++ test (CPU)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-11]
    steps:
    - uses: actions/checkout@e2f20e631ae6d7dd3b768f56a5d2af784dd54791 # v2.5.0
      with:
        submodules: 'true'
    - name: Install system packages
      run: |
        brew install ninja libomp
    - name: Build gtest binary
      run: |
        mkdir build
        cd build
        cmake .. -DGOOGLE_TEST=ON -DUSE_OPENMP=ON -DUSE_DMLC_GTEST=ON -DPLUGIN_DENSE_PARSER=ON -GNinja
        ninja -v
    - name: Run gtest binary
      run: |
        cd build
        ./testxgboost
        ctest -R TestXGBoostCLI --extra-verbose

  gtest-cpu-nonomp:
    name: Test Google C++ unittest (CPU Non-OMP)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    steps:
    - uses: actions/checkout@e2f20e631ae6d7dd3b768f56a5d2af784dd54791 # v2.5.0
      with:
        submodules: 'true'
    - name: Install system packages
      run: |
        sudo apt-get install -y --no-install-recommends ninja-build
    - name: Build and install XGBoost
      shell: bash -l {0}
      run: |
        mkdir build
        cd build
        cmake .. -GNinja -DGOOGLE_TEST=ON  -DUSE_DMLC_GTEST=ON -DUSE_OPENMP=OFF
        ninja -v
    - name: Run gtest binary
      run: |
        cd build
        ctest --extra-verbose

  c-api-demo:
    name: Test installing XGBoost lib + building the C API demo
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest"]
        python-version: ["3.8"]
    steps:
    - uses: actions/checkout@e2f20e631ae6d7dd3b768f56a5d2af784dd54791 # v2.5.0
      with:
        submodules: 'true'
    - uses: mamba-org/provision-with-micromamba@f347426e5745fe3dfc13ec5baf20496990d0281f # v14
      with:
        cache-downloads: true
        cache-env: true
        environment-name: cpp_test
        environment-file: tests/ci_build/conda_env/cpp_test.yml
    - name: Display Conda env
      shell: bash -l {0}
      run: |
        conda info
        conda list

    - name: Build and install XGBoost static library
      shell: bash -l {0}
      run: |
        mkdir build
        cd build
        cmake .. -DBUILD_STATIC_LIB=ON -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX -GNinja
        ninja -v install
        cd -
    - name: Build and run C API demo with static
      shell: bash -l {0}
      run: |
        pushd .
        cd demo/c-api/
        mkdir build
        cd build
        cmake .. -GNinja -DCMAKE_PREFIX_PATH=$CONDA_PREFIX
        ninja -v
        ctest
        cd ..
        rm -rf ./build
        popd

    - name: Build and install XGBoost shared library
      shell: bash -l {0}
      run: |
        cd build
        cmake .. -DBUILD_STATIC_LIB=OFF -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX -GNinja
        ninja -v install
        cd -
    - name: Build and run C API demo with shared
      shell: bash -l {0}
      run: |
        pushd .
        cd demo/c-api/
        mkdir build
        cd build
        cmake .. -GNinja -DCMAKE_PREFIX_PATH=$CONDA_PREFIX
        ninja -v
        ctest
        popd
        ./tests/ci_build/verify_link.sh ./demo/c-api/build/basic/api-demo
        ./tests/ci_build/verify_link.sh ./demo/c-api/build/external-memory/external-memory-demo

  cpp-lint:
    runs-on: ubuntu-latest
    name: Code linting for C++
    steps:
    - uses: actions/checkout@e2f20e631ae6d7dd3b768f56a5d2af784dd54791 # v2.5.0
      with:
        submodules: 'true'
    - uses: actions/setup-python@7f80679172b057fc5e90d70d197929d454754a5a # v4.3.0
      with:
        python-version: "3.8"
        architecture: 'x64'
    - name: Install Python packages
      run: |
        python -m pip install wheel setuptools cpplint pylint
    - name: Run lint
      run: |
        python dmlc-core/scripts/lint.py xgboost cpp R-package/src

  sphinx:
    runs-on: ubuntu-latest
    name: Build docs using Sphinx
    steps:
    - uses: actions/checkout@e2f20e631ae6d7dd3b768f56a5d2af784dd54791 # v2.5.0
      with:
        submodules: 'true'
    - uses: actions/setup-python@7f80679172b057fc5e90d70d197929d454754a5a # v4.3.0
      with:
        python-version: "3.8"
        architecture: 'x64'
    - name: Install system packages
      run: |
        sudo apt-get install -y --no-install-recommends graphviz doxygen ninja-build
        python -m pip install wheel setuptools awscli
        python -m pip install -r doc/requirements.txt
    - name: Extract branch name
      shell: bash
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      id: extract_branch
      if: github.ref == 'refs/heads/master' || contains(github.ref, 'refs/heads/release_')
    - name: Run Sphinx
      run: |
        make -C doc html
      env:
        SPHINX_GIT_BRANCH: ${{ steps.extract_branch.outputs.branch }}
        READTHEDOCS: "True"

    - name: Publish
      run: |
        tar cvjf ${{ steps.extract_branch.outputs.branch }}.tar.bz2 doxygen/doc_doxygen/
        python -m awscli s3 cp ./${{ steps.extract_branch.outputs.branch }}.tar.bz2 s3://xgboost-docs/doxygen/ --acl public-read
      if: github.ref == 'refs/heads/master' || contains(github.ref, 'refs/heads/release_')
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_IAM_S3_UPLOADER }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_IAM_S3_UPLOADER }}
