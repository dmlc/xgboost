/*
 Copyright (c) 2014 by Contributors 

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
    
 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
package org.dmlc.xgboost4j;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.dmlc.xgboost4j.util.Initializer;
import org.dmlc.xgboost4j.util.Params;
import org.dmlc.xgboost4j.util.TransferUtil;
import org.dmlc.xgboost4j.wrapper.XgboostJNI;


/**
 * Booster for xgboost, similar to the python wrapper xgboost.py
 * but custom obj function and eval function not supported at present.
 * @author hzx
 */
public final class Booster {
    private static final Log logger = LogFactory.getLog(Booster.class);
    
    long handle = 0;
    
    //load native library
    static {
        try {
            Initializer.InitXgboost();
        } catch (IOException ex) {
            logger.error("load native library failed.");
            logger.error(ex);
        }
    }
    
    /**
     * init Booster from dMatrixs
     * @param params parameters
     * @param dMatrixs DMatrix array
     */
    public Booster(Params params, DMatrix[] dMatrixs) {
        init(dMatrixs);
        setParam("seed","0");
        setParams(params);
    }
    

    
    /**
     * load model from modelPath
     * @param params parameters
     * @param modelPath booster modelPath (model generated by booster.saveModel)
     */
    public Booster(Params params, String modelPath) {
        handle = XgboostJNI.XGBoosterCreate(new long[] {});
        loadModel(modelPath);
        setParam("seed","0");
        setParams(params);
    }
    
  
    
    
    private void init(DMatrix[] dMatrixs) {
        long[] handles = null;
        if(dMatrixs != null) {
            handles = TransferUtil.dMatrixs2handles(dMatrixs);
        }
        handle = XgboostJNI.XGBoosterCreate(handles);
    }
    
    /**
     * set parameter
     * @param key param name
     * @param value param value
     */
    public final void setParam(String key, String value) {
        XgboostJNI.XGBoosterSetParam(handle, key, value);
    }
    
    /**
     * set parameters
     * @param params parameters key-value map 
     */
    public void setParams(Params params) {
        if(params!=null) {
            for(Map.Entry<String, String> entry : params) {
                setParam(entry.getKey(), entry.getValue());
            }
        }
    }
    
    
    /**
     * Update (one iteration)
     * @param dtrain training data
     * @param iter current iteration number
     */
    public void update(DMatrix dtrain, int iter) {
        XgboostJNI.XGBoosterUpdateOneIter(handle, iter, dtrain.getHandle());
    }
    
    /**
     * evaluate with given dmatrixs.
     * @param evalMatrixs dmatrixs for evaluation
     * @param evalNames name for eval dmatrixs, used for check results
     * @param iter current eval iteration
     * @return eval information
     */
    public String evalSet(DMatrix[] evalMatrixs, String[] evalNames,  int iter) {
        long[] handles = TransferUtil.dMatrixs2handles(evalMatrixs);
        String evalInfo = XgboostJNI.XGBoosterEvalOneIter(handle, iter, handles, evalNames);
        return evalInfo;
    }
    
     /**
     * evaluate with given dmatrixs.
     * @param dmats 
     * @param evalNames name for eval dmatrixs, used for check results
     * @param iter current eval iteration
     * @return eval information
     */
    public String evalSet(long[] dmats, String[] evalNames,  int iter) {
        String evalInfo = XgboostJNI.XGBoosterEvalOneIter(handle, iter, dmats, evalNames);
        return evalInfo;
    }
    
    
    /**
     * evaluate with given dmatrix, similar to evalSet
     * @param evalMat
     * @param evalName
     * @param iter
     * @return eval information
     */
    public String eval(DMatrix evalMat, String evalName, int iter) {
        DMatrix[] evalMats = new DMatrix[] {evalMat};
        String[] evalNames = new String[] {evalName};
        return  evalSet(evalMats, evalNames, iter);
    }
    
    /**
     * base function for Predict
     * @param data
     * @param outPutMargin
     * @param treeLimit
     * @param predLeaf
     * @return predict results
     */
    private float[][] pred(DMatrix data, boolean outPutMargin, long treeLimit, boolean predLeaf) {
        int optionMask = 0;
        if(outPutMargin) {
            optionMask = 1;
        }
        if(predLeaf) {
            optionMask = 2;
        }
        float[] rawPredicts = XgboostJNI.XGBoosterPredict(handle, data.getHandle(), optionMask, treeLimit);
        int row = (int) data.rowNum();
        int col = (int) rawPredicts.length/row;
        float[][] predicts = new float[row][col];
        int r,c;
        for(int i=0; i< rawPredicts.length; i++) {
            r = i/col;
            c = i%col;
            predicts[r][c] = rawPredicts[i];
        }
        return predicts;
    } 
    
    /**
     * Predict with data
     * @param data dmatrix storing the input
     * @return predict result 
     */
    public float[][] predict(DMatrix data) {
        return pred(data, false, 0, false);
    }
    
    /**
     * Predict with data
     * @param data dmatrix storing the input
     * @param outPutMargin Whether to output the raw untransformed margin value.
     * @return predict result
     */
    public float[][] predict(DMatrix data, boolean outPutMargin) {
        return pred(data, outPutMargin, 0, false);
    }
    
    /**
     * Predict with data
     * @param data dmatrix storing the input
     * @param outPutMargin Whether to output the raw untransformed margin value.
     * @param treeLimit Limit number of trees in the prediction; defaults to 0 (use all trees).
     * @return predict result
     */
    public float[][] predict(DMatrix data, boolean outPutMargin, long treeLimit) {
        return pred(data, outPutMargin, treeLimit, false);
    }
    
    /**
     * Predict with data 
     * @param data dmatrix storing the input
     * @param treeLimit Limit number of trees in the prediction; defaults to 0 (use all trees).
     * @param predLeaf When this option is on, the output will be a matrix of (nsample, ntrees), nsample = data.numRow
            with each record indicating the predicted leaf index of each sample in each tree.
            Note that the leaf index of a tree is unique per tree, so you may find leaf 1
            in both tree 1 and tree 0.
     * @return predict result
     */
    public float[][] predict(DMatrix data , long treeLimit, boolean predLeaf) {
        return pred(data, false, treeLimit, predLeaf);
    }
    
    /**
     * save model to modelPath
     * @param modelPath 
     */
    public void saveModel(String modelPath) {
        XgboostJNI.XGBoosterSaveModel(handle, modelPath);
    }
    
    private void loadModel(String modelPath) {
        XgboostJNI.XGBoosterLoadModel(handle, modelPath);
    }
    
    /**
     * get the dump of the model as a string array
     * @param withStats Controls whether the split statistics are output.
     * @return dumped model information
     */
    public String[] getDumpInfo(boolean withStats) {
        int statsFlag = 0;
        if(withStats) {
            statsFlag = 1;
        }
        String[] modelInfos = XgboostJNI.XGBoosterDumpModel(handle, "", statsFlag);
        return modelInfos;
    }
    
    /**
     * get the dump of the model as a string array
     * @param featureMap featureMap file
     * @param withStats Controls whether the split statistics are output.
     * @return dumped model information
     */
    public String[] getDumpInfo(String featureMap, boolean withStats) {
        int statsFlag = 0;
        if(withStats) {
            statsFlag = 1;
        }
        String[] modelInfos = XgboostJNI.XGBoosterDumpModel(handle, featureMap, statsFlag);
        return modelInfos;
    }
    
    /**
     * Dump model into a text file.
     * @param modelPath file to save dumped model info
     * @param withStats bool
            Controls whether the split statistics are output.
     * @throws FileNotFoundException
     * @throws UnsupportedEncodingException
     * @throws IOException 
     */
    public void dumpModel(String modelPath, boolean withStats) throws FileNotFoundException, UnsupportedEncodingException, IOException {
        File tf = new File(modelPath);
        FileOutputStream out = new FileOutputStream(tf);
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(out, "UTF-8"));
        String[] modelInfos = getDumpInfo(withStats);
        
        for(int i=0; i<modelInfos.length; i++) {
            writer.write("booster [" + i +"]:\n");
            writer.write(modelInfos[i]);
        }
        
        writer.close();
        out.close();
    }
    
    
    /**
     * Dump model into a text file.
     * @param modelPath file to save dumped model info
     * @param featureMap featureMap file
     * @param withStats bool
            Controls whether the split statistics are output.
     * @throws FileNotFoundException
     * @throws UnsupportedEncodingException
     * @throws IOException 
     */
    public void dumpModel(String modelPath, String featureMap, boolean withStats) throws FileNotFoundException, UnsupportedEncodingException, IOException {
        File tf = new File(modelPath);
        FileOutputStream out = new FileOutputStream(tf);
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(out, "UTF-8"));
        String[] modelInfos = getDumpInfo(featureMap, withStats);
        
        for(int i=0; i<modelInfos.length; i++) {
            writer.write("booster [" + i +"]:\n");
            writer.write(modelInfos[i]);
        }
        
        writer.close();
        out.close();
    }
    
    
    /**
     * get importance of each feature
     * @return featureMap  key: feature index, value: feature importance score
     */
    public Map<String, Integer> getFeatureScore() {
        String[] modelInfos = getDumpInfo(false);
        Map<String, Integer> featureScore = new HashMap<>();
        for(String tree : modelInfos) {
            for(String node : tree.split("\n")) {
                String[] array = node.split("\\[");
                if(array.length == 1) {
                    continue;
                }
                String fid = array[1].split("\\]")[0];
                fid = fid.split("<")[0];
                if(featureScore.containsKey(fid)) {
                    featureScore.put(fid, 1 + featureScore.get(fid));
                }
                else {
                    featureScore.put(fid, 1);
                }
            }
        }
        return featureScore;
    }
    
    
    /**
     * get importance of each feature
     * @param featureMap file to save dumped model info
     * @return featureMap  key: feature index, value: feature importance score
     */
    public Map<String, Integer> getFeatureScore(String featureMap) {
        String[] modelInfos = getDumpInfo(featureMap, false);
        Map<String, Integer> featureScore = new HashMap<>();
        for(String tree : modelInfos) {
            for(String node : tree.split("\n")) {
                String[] array = node.split("\\[");
                if(array.length == 1) {
                    continue;
                }
                String fid = array[1].split("\\]")[0];
                fid = fid.split("<")[0];
                if(featureScore.containsKey(fid)) {
                    featureScore.put(fid, 1 + featureScore.get(fid));
                }
                else {
                    featureScore.put(fid, 1);
                }
            }
        }
        return featureScore;
    }
    
    @Override
    protected void finalize() {
        delete();
    }
    
    public synchronized void delete() {
        if(handle != 0l) {
            XgboostJNI.XGBoosterFree(handle);
            handle=0;
        }
    }
}
